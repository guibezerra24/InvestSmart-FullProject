name: CI/CD Security (SAST + SCA + DAST)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest

  sca:
    name: SCA (pip-audit + licenças)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps for audit
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit pip-licenses

      - name: CVE scan (pip-audit)
        run: |
          pip-audit -r requirements.txt -f json -o pip-audit.json || true
          pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          test -f pip-audit.sarif || echo "[]" > pip-audit.sarif

      - name: Licenses report
        run: |
          pip-licenses --format=csv --with-authors --with-urls > licenses.csv

      - name: Upload SCA artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sca-reports
          path: |
            pip-audit.json
            pip-audit.sarif
            licenses.csv

      - name: Upload SARIF (CVE)
        if: ${{ always() && hashFiles('pip-audit.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif

  sast:
  name: SAST (Semgrep)
  runs-on: ubuntu-latest
  needs: tests
  steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Semgrep (pip)
      run: |
        python -m pip install --upgrade pip
        python -m pip install semgrep

    # Gera SARIF (para Security/PR). Usa 'scan' e salva no arquivo.
    - name: Semgrep SARIF
      run: |
        semgrep scan \
          --config p/ci \
          --config r/python \
          --config r/secrets \
          --config r/owasp-top-ten \
          --severity=ERROR \
          --sarif -o semgrep-results.sarif || true
        [ -f semgrep-results.sarif ] || echo '{"runs":[]}' > semgrep-results.sarif

    # Gera JSON (artefato pra baixar)
    - name: Semgrep JSON
      run: |
        semgrep scan \
          --config p/ci \
          --config r/python \
          --config r/secrets \
          --config r/owasp-top-ten \
          --severity=ERROR \
          --json -o semgrep-results.json || true
        [ -f semgrep-results.json ] || echo '{}' > semgrep-results.json

    - name: Upload SARIF to GitHub
      if: ${{ always() && hashFiles('semgrep-results.sarif') != '' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep-results.sarif

    - name: Save artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sast-semgrep
        path: |
          semgrep-results.sarif
          semgrep-results.json


  dast:
    name: DAST (ZAP baseline + Nikto)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install & start app (staging)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 &
          for i in {1..20}; do curl -fsS http://127.0.0.1:8000/health && break || sleep 1; done

      - name: ZAP Baseline Scan (HTML + JSON)
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://127.0.0.1:8000'
          cmd_options: '-a -J zap.json'
        continue-on-error: true

      - name: Collect ZAP reports (HTML + JSON)
        run: |
          mv report.html zap-baseline-report.html || true
          test -f zap.json || echo '{}' > zap.json

      - name: Nikto Scan
        run: |
          sudo docker pull sullo/nikto
          sudo docker run --rm --network host sullo/nikto -host http://127.0.0.1:8000 > nikto.txt || true
          
      - name: Consolidate evidence (payloads + mitigations)
        run: |
          python - << 'PY'
import json, pathlib
out = pathlib.Path("security-evidence.md")
items = []
try:
    data = json.loads(pathlib.Path("zap.json").read_text())
    sites = data.get("site") or data.get("sites") or []
    if isinstance(sites, dict):
        sites = [sites]
    for site in sites:
        for a in site.get("alerts", []):
            name = a.get("alert", "Alerta")
            risk = a.get("riskcode", "?")
            evid = []
            for inst in a.get("instances", []):
                uri = inst.get("uri"); ev = inst.get("evidence")
                if uri or ev:
                    evid.append(f"- URI: {uri or '-'}; Evidence: {ev or '-'}")
            if evid:
                items.append(f"### {name} (risk {risk})\n" + "\n".join(evid))
except Exception as e:
    items.append(f"_Erro lendo zap.json: {e}_")

mitig = """
## Mitigações sugeridas
- Validar/normalizar entradas do usuário.
- Autenticação forte e RBAC em endpoints críticos.
- HTTPS + security headers (CSP, HSTS, X-Content-Type-Options).
- Queries parametrizadas/ORM (evitar injeção).
- Remover dados sensíveis de respostas e aplicar rate limiting.
"""
pathlib.Path(out).write_text("# Evidências DAST (ZAP)\n\n" + "\n\n".join(items) + "\n\n" + mitig, encoding="utf-8")
print(f"Escrito {out}")
PY

      - name: Upload DAST artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dast-reports
          path: |
            zap-baseline-report.html
            zap.json
            nikto.txt
            security-evidence.md

  deploy_simulado:
    name: Deploy (simulado) para staging
    runs-on: ubuntu-latest
    needs: [sca, sast, dast]
    if: ${{ success() }}
    steps:
      - run: echo "Deploy liberado (todos os gates passaram)."
